---
import 'hotkeypad/reset.css'
import 'hotkeypad/index.css'
import { type SocialIcon } from "@/types"
import ProtonMail from "@/icons/ProtonMail.astro?raw"
import Bluesky from "@/icons/bluesky.astro?raw"
import Mastodon from "@/icons/mastodon.astro?raw"
import Medium from "@/icons/medium.astro?raw"
import LinkedIn from "@/icons/LinkedIn.astro?raw"
import GitHub from "@/icons/GitHub.astro?raw"
import GitLab from "@/icons/GitLab2.astro?raw"
import CalCom from "@/icons/calcom.astro?raw"
import PrintIcon from "@/icons/print.astro"
import { basics } from "@cv"
import { repository } from "package.json"

const { profiles } = basics

const SOCIAL_ICONS : SocialIcon = {
  LinkedIn,
  GitHub,
  GitLab,
  Mastodon,
  Medium,
  Bluesky,
  ProtonMail,
  CalCom,
}

const profilesInfo = profiles
  .filter(obj => obj?.shortcut?.length === 1)
  .map(({ network, url, shortcut }) => {
    const icon = SOCIAL_ICONS[network]
    if (!icon) throw Error(`No icon was found for network ${network}.`)

    return {
      id: network,
      section: "Social",
      title: `Goto ${network}`,
      url,
      icon,
      hotkey: shortcut
  }
})
---

<footer id="normal-footer" class="no-print" data-source-code={repository.url}>
  Press <kbd>Cmd</kbd> + <kbd>K</kbd> to open the command palette.
</footer>

<div id="footer-button" class="no-print">
  <PrintIcon />
</div>

<div
  id="hotkeypad"
  data-placeholder="Search command"
  data-info={JSON.stringify(profilesInfo)}
>
</div>

<script>
  interface Info {
    id: string
    section: string
    title: string
    url: string
    icon: string
    hotkey: string
    handler?: () => void
  }

  import HotKeyPad from "hotkeypad"

  const hotkeypad = new HotKeyPad()
  const info = hotkeypad.instance.getAttribute("data-info") ?? "[]"
  const parsedInfo = JSON.parse(info) as Info[]

  const data = parsedInfo.map(
    ({ url, hotkey, icon, id, section, title }) => {
      return {
        id,
        title,
        icon,
        hotkey: `${hotkeypad.activationKey}+${hotkey}`,
        section,
        handler: () => {
          window.open(url, "_blank")
        }
      }
    }
  )
  const sourceCodeUrl = 
    document.getElementById('normal-footer')
    ?.getAttribute('data-source-code');

  const essentialCommands = []
  essentialCommands.push({
    id: "print",
    title: "Print",
    icon: `<svg style="margin-right: 8px" width="16" height="16" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor">
      <path stroke-linecap="round" stroke-linejoin="round" d="M6.72 13.829c-.24.03-.48.062-.72.096m.72-.096a42.415 42.415 0 0 1 10.56 0m-10.56 0L6.34 18m10.94-4.171c.24.03.48.062.72.096m-.72-.096L17.66 18m0 0 .229 2.523a1.125 1.125 0 0 1-1.12 1.227H7.231c-.662 0-1.18-.568-1.12-1.227L6.34 18m11.318 0h1.091A2.25 2.25 0 0 0 21 15.75V9.456c0-1.081-.768-2.015-1.837-2.175a48.055 48.055 0 0 0-1.913-.247M6.34 18H5.25A2.25 2.25 0 0 1 3 15.75V9.456c0-1.081.768-2.015 1.837-2.175a48.041 48.041 0 0 1 1.913-.247m10.5 0a48.536 48.536 0 0 0-10.5 0m10.5 0V3.375c0-.621-.504-1.125-1.125-1.125h-8.25c-.621 0-1.125.504-1.125 1.125v3.659M18 10.5h.008v.008H18V10.5Zm-3 0h.008v.008H15V10.5Z" />
      </svg>`,
    hotkey: `${hotkeypad.activationKey}+P`,
    section: "Action",
    handler: () => {
      window.print()
    }
  })
  if (sourceCodeUrl?.startsWith('http')) essentialCommands.push({
    id: "Show source",
    title: "Source code",
    icon: `<svg stroke-width="2" stroke="currentColor" fill="none" stroke-linecap="round"
      stroke-linejoin="round"><path stroke="none" d="M0 0h24v24H0z" fill="none"></path><path
      d="M16 12m-1 0a1 1 0 1 0 2 0a1 1 0 1 0 -2 0"></path><path
      d="M12 8m-1 0a1 1 0 1 0 2 0a1 1 0 1 0 -2 0"></path><path
      d="M12 16m-1 0a1 1 0 1 0 2 0a1 1 0 1 0 -2 0"></path><path d="M12 15v-6"
      ></path><path d="M15 11l-2 -2"></path><path d="M11 7l-1.9 -1.9"></path><path
        d="M13.446 2.6l7.955 7.954a2.045 2.045 0 0 1 0 2.892l-7.955 7.955a2.045 2.045 0 0 1 -2.892 0l-7.955 -7.955a2.045 2.045 0 0 1 0 -2.892l7.955 -7.955a2.045 2.045 0 0 1 2.892 0z"
      ></path></svg>`,
    hotkey: `${hotkeypad.activationKey}+E`,
    section: "Action",
    handler: () => {
      window.open(sourceCodeUrl, "_blank")
    }
  }); else console.error(`Source code not found (repository.url='${sourceCodeUrl}')`)
  hotkeypad.setCommands([
    ...essentialCommands,
    ...data
  ])

  const footerButton = document.getElementById("footer-button")
  footerButton?.addEventListener("click", () => {
    var event = new KeyboardEvent("keydown", {
      key: "K",
      code: "KeyK",
      keyCode: 75,
      which: 75,
      ctrlKey: true,
      altKey: false,
      shiftKey: false,
      metaKey: false
    })

    document.dispatchEvent(event)
  })
</script>

<style>

  #normal-footer {
    background-color: cornsilk;
  }

  @keyframes fadeIn {
    from {
      opacity: 0;
    }
    to {
      opacity: 1;
    }
  }

  @media (min-width: 601px) {
    #normal-footer {
      display: block;
    }

    #footer-button {
      display: none;
    }
  }

  @media (max-width: 600px) {
    #normal-footer {
      display: none;
    }

    #footer-button {
      background: #fff;
      position: fixed;
      border: 1px solid #eee;
      right: 10px;
      bottom: 10px;
      width: 50px;
      height: 50px;
      border-radius: 50%;
      display: flex;
      align-items: center;
      justify-content: center;
      cursor: pointer;
    }
  }

  footer {
    background: #fdfdfd;
    border-top: 1px solid #eee;
    position: fixed;
    bottom: 0px;
    width: 100%;
    padding-block: 8px;
    text-align: center;
    font-size: 0.85rem;

    view-timeline-name: --revealing;
    view-timeline-axis: block;

    animation: linear 0.3s fadeIn;
    animation-timeline: --revealing;
    animation-range: entry 100% cover 10%;
  }

  kbd {
    background: #eee;
    border-radius: 4px;
    padding: 2px 4px;
    font-size: 12px;
  }
</style>
