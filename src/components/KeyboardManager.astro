---
import 'hotkeypad/reset.css'
import 'hotkeypad/index.css'
import { type SocialIcon } from "@/types"
import ProtonMail from "@/icons/ProtonMail.astro?raw"
import Bluesky from "@/icons/bluesky.astro?raw"
import Mastodon from "@/icons/mastodon.astro?raw"
import Medium from "@/icons/medium.astro?raw"
import LinkedIn from "@/icons/LinkedIn.astro?raw"
import GitHub from "@/icons/GitHub.astro?raw"
import GitLab from "@/icons/GitLab2.astro?raw"
import CalCom from "@/icons/calcom.astro?raw"
import ShortcutIcon from "@/icons/Shortcut.astro"
import PrintIcon from "@/icons/Print.astro"
import SourceCodeIcon from "@/icons/git.astro"
import PublicKeyIcon from "@/icons/publickey.astro"
import PDFIcon from "@/icons/pdf.astro"
import { basics } from "@cv"
import { repository } from "package.json"
import PGPPublicKeyText from "@public/public.pgp?raw"

const { profiles } = basics

const SOCIAL_ICONS : SocialIcon = {
  LinkedIn,
  GitHub,
  GitLab,
  Mastodon,
  Medium,
  Bluesky,
  ProtonMail,
  CalCom,
}

const profilesInfo = profiles
  .filter(obj => obj?.shortcut?.length === 1)
  .map(({ network, url, shortcut }) => {
    const icon = SOCIAL_ICONS[network]
    if (!icon) throw Error(`No icon was found for network ${network}.`)

    return {
      id: network,
      section: "Social",
      title: `Goto ${network}`,
      url,
      icon,
      hotkey: shortcut
  }
})
---

<footer id="normal-footer" class="no-print" data-source-code={repository.url}>
  Press <kbd>Cmd</kbd> + <kbd>K</kbd> to open the command palette.
</footer>

<div id="footer-button" class="no-print">
  <ShortcutIcon />
</div>

<div
  id="hotkeypad"
  data-placeholder="Search command"
  data-info={JSON.stringify(profilesInfo)}
>
</div>

<div style="display:none">
  <div id="icon-print"><PrintIcon /></div>
  <div id="icon-sourcecode"><SourceCodeIcon /></div>
  <div id="icon-publickey"><PublicKeyIcon /></div>
  <div id="icon-pdf"><PDFIcon /></div>
  <textarea id="text-publickey">{PGPPublicKeyText}</textarea>
</div>

<script>
  interface Info {
    id: string
    section: string
    title: string
    url: string
    icon: string
    hotkey: string
    handler?: () => void
  }

  import HotKeyPad from "hotkeypad"

  const hotkeypad = new HotKeyPad()
  const info = hotkeypad.instance.getAttribute("data-info") ?? "[]"
  const parsedInfo = JSON.parse(info) as Info[]

  const data = parsedInfo.map(
    ({ url, hotkey, icon, id, section, title }) => {
      return {
        id,
        title,
        icon,
        hotkey: `${hotkeypad.activationKey.toLowerCase()}+${hotkey.toLowerCase()}`,
        section,
        handler: () => {
          window.open(url, "_blank")
        }
      }
    }
  )
  const sourceCodeUrl = 
    document.getElementById('normal-footer')?.getAttribute('data-source-code');

  const essentialCommands = []
  essentialCommands.push({
    id: "print",
    title: "Print",
    icon: document.getElementById("icon-print")?.innerHTML,
    hotkey: `${hotkeypad.activationKey.toLowerCase()}+p`,
    section: "Action",
    handler: () => {
      window.print()
    }
  })
  essentialCommands.push({
    id: "pgp key",
    title: "Copy Public PGP Key",
    icon: document.getElementById("icon-publickey")?.innerHTML,
    hotkey: `${hotkeypad.activationKey.toLowerCase()}+g`,
    section: "Action",
    handler: () => {
      const textareaPublicKey = document.getElementById("text-publickey");
      if (textareaPublicKey instanceof HTMLTextAreaElement) {
        textareaPublicKey.select();
        textareaPublicKey.setSelectionRange(0, 99999);
        // if (typeof document.execCommand === 'function') {
        //   document.execCommand('copy')
        // }
        navigator.clipboard.writeText(textareaPublicKey.value)
          .then(() => {
            console.info(`%cSuccessfully copied public PGP key to clipboard...`, 
              'font-weight:bold;background:green;color:white');
            console.log(`%c${textareaPublicKey.value}`, 'background:#eee;color:green');
          }).catch((error) => {
            console.error(`%cCould not copy PGP key to clipboard (error: ${error}), copy manually:`, 
              'font-weight:bold;background:maroon;color:white');
            console.log(`%c${textareaPublicKey.value}`, 'background:#eee;color:red');
          });
        
      } else {
        console.error("PGP key not found on page...");
      }
    }
  })

  if (sourceCodeUrl?.startsWith('http')) essentialCommands.push({
    id: "Show source",
    title: "Source code",
    icon: document.getElementById("icon-sourcecode")?.innerHTML,
    hotkey: `${hotkeypad.activationKey.toLowerCase()}+e`,
    section: "Download",
    handler: () => {
      window.open(sourceCodeUrl, "_blank")
    }
  }); else console.error(`Source code not found (repository.url='${sourceCodeUrl}')`)

  essentialCommands.push({
    id: "Resume PDF",
    title: "Resume ðŸ‡ºðŸ‡¸ (PDF)",
    icon: document.getElementById("icon-pdf")?.innerHTML,
    hotkey: `${hotkeypad.activationKey.toLowerCase()}+u`,
    section: "Download",
    handler: () => {
      window.open("/en.pdf", "_blank")
    }
  })

  essentialCommands.push({
    id: "Lebenslauf PDF",
    title: "Lebenslauf ðŸ‡©ðŸ‡ª (PDF)",
    icon: document.getElementById("icon-pdf")?.innerHTML,
    hotkey: `${hotkeypad.activationKey.toLowerCase()}+j`,
    section: "Download",
    handler: () => {
      window.open("/de.pdf", "_blank")
    }
  })

  hotkeypad.setCommands([
    ...essentialCommands,
    ...data
  ])

  if (sourceCodeUrl?.startsWith('http')) essentialCommands.push({
    id: "Show source",
    title: "Source code",
    icon: document.getElementById("icon-sourcecode")?.innerHTML,
    hotkey: `${hotkeypad.activationKey.toLowerCase()}+e`,
    section: "Download",
    handler: () => {
      window.open(sourceCodeUrl, "_blank")
    }
  }); else console.error(`Source code not found (repository.url='${sourceCodeUrl}')`)

  const footerButton = document.getElementById("footer-button")
  footerButton?.addEventListener("click", () => {
    var event = new KeyboardEvent("keydown", {
      key: "K",
      code: "KeyK",
      keyCode: 75,
      which: 75,
      ctrlKey: true,
      altKey: false,
      shiftKey: false,
      metaKey: false
    })

    document.dispatchEvent(event)
  })
</script>

<style>

  #hotkeypad {
    /* --hotkeypad-bg-container: #ebf0ef;
    --hotkeypad-bg-backdrop: #fff;
    --hotkeypad-bg-container: #fff;
    --hotkeypad-bg-item-hover: #f3f4f6;
    --hotkeypad-border-container: #d1d5db;
    --hotkeypad-border-container-hover: #9ca3af;
    --hotkeypad-fg-muted: #4b5563; */
  }

  #footer-button {
    background: linear-gradient(120deg,hsl(360, 42%, 65%) -1.72%, hsl(235, 32%, 73%) 99.78%);
    color: white;  /* #777 */
  }
  #normal-footer {
    background: linear-gradient(120deg,hsl(360, 42%, 65%) -1.72%,#ffffff 54.05%,hsl(235, 32%, 73%) 99.78%);
  }
  #footer-button, #normal-footer {
    animation: gradient 15s ease infinite;
  }

  @keyframes fadeIn {
    from {
      opacity: 0;
    }
    to {
      opacity: 1;
    }
  }

  @media (min-width: 601px) {
    #normal-footer {
      display: block;
    }

    #footer-button {
      display: none;
    }
  }

  @media (max-width: 600px) {
    #normal-footer {
      display: none;
    }

    #footer-button {
      /* background: #fff; */
      position: fixed;
      border: 1px solid #eee;
      right: 10px;
      bottom: 10px;
      width: 50px;
      height: 50px;
      border-radius: 50%;
      display: flex;
      align-items: center;
      justify-content: center;
      cursor: pointer;
    }
  }

  footer {
    background: #fdfdfd;
    border-top: 1px solid #eee;
    position: fixed;
    bottom: 0px;
    width: 100%;
    padding-block: 8px;
    text-align: center;
    font-size: 0.85rem;

    view-timeline-name: --revealing;
    view-timeline-axis: block;

    animation: linear 0.3s fadeIn;
    animation-timeline: --revealing;
    animation-range: entry 100% cover 10%;
  }

  kbd {
    background: #00000015;
    border-radius: 4px;
    padding: 2px 4px;
    font-size: 12px;
  }
</style>
