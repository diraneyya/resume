---
import Section from "../Section.astro"
import type { AstroInstance } from "astro"
import { technical_skills, core_skills } from "@cv"

const SKILLS_ICONS : Record<string, AstroInstance> = import.meta.glob("@/icons/*.astro", { eager: true })
---

<Section title="Core Skills">
  <ul>
    {
      core_skills.map((name) => {

        const _ = (text : string) => 
          text.replaceAll(/(\w+)/g, (match) => match.charAt(0).toUpperCase() + match.slice(1))
        return (
          <li class="shiny_bg"><span>{_(name)}</span></li>
        )
      })
    }
  </ul>
</Section>

<Section title="Other Skills">
  <ul>
    {
      technical_skills.filter(obj => obj?.hide !== true).map(({ name, icon, url, icon_only, expert }) => {
        // split over non-word characters which is a simple and an ingenious way
        // to take the text of the skill and turn it into something that can work
        // nicely for the icon name (e.g. "Docker/Compose/Swarm" => gives "Docker")
        const iconName = icon || name.split(/\W/)[0]
        const Icon = SKILLS_ICONS[`/src/icons/${iconName}.astro`]

        const isDeployed = url?.startsWith('http')
        let content = <Fragment>{Icon && <Icon.default />} <span>{name}</span></Fragment>
        if (icon_only === true)
          content = <Fragment>{Icon && <Icon.default />}</Fragment>

        return (
          <li class:list={[ 
            expert === true ? 'shiny_bg' : '', 
            isDeployed === true ? 'pulsing' : '' 
            ]}>{isDeployed == true ? <a target="_blank" href={url}>{
              content}</a> : content }</li>
        )
      })
    }
  </ul>
</Section>

<style>
  ul {
    display: inline-flex;
    gap: 8px;
    flex-wrap: wrap;
  }

  li {
    align-items: center;
    background-color: hsl(160, 50%, 90%);
    border-radius: 6px;
    color: black;
    display: flex;
    font-size: 0.8rem;
    font-weight: 500;
    gap: 4px;
    padding: 0.2rem 0.6rem;
  }

  li.shiny_bg {
    background-color: aquamarine;
  }

  .pulsing {
    animation: pulse-animation 1.5s infinite;
    animation-timing-function: ease-out;
  }

  @keyframes pulse-animation {
    0% {
      transform: scale(0.9);
      box-shadow: 0 0 0 0 rgb(255, 0, 225);
    }

    70% {
      transform: scale(96%);
      box-shadow: 0 0 0 6px rgba(255, 82, 82, 0);
    }

    100% {
      transform: scale(0.9);
      box-shadow: 0 0 0 0 rgba(255, 82, 82, 0);
    }
  }

  @media print {
    li.shiny_bg {
      background-color: inherit;
      border-width: 0.2mm;
      border-style: dotted;
      border-color: #666;
    }

    .pulsing {
      animation: none;
      border: #333 solid 0.2mm;
    }
    /* li {
      border: 0.2mm solid #000
    } */
  }
</style>
